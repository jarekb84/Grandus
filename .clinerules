# Grandus Project Intelligence (.clinerules)

This file captures key patterns, preferences, and project intelligence discovered during development. It serves as a learning journal to help Cline work more effectively on this specific project.

## Core Gameplay Loop & Architecture

*   **Primary Loop:** The game revolves around a distinct cycle involving three main views:
    1.  **Territory View (PhaserJS):** Strategic planning, visual gathering management, hex interaction, combat initiation.
    2.  **Management View (React):** Permanent progression hub (upgrades, crafting), goal setting.
    3.  **Combat Scene (PhaserJS):** Active combat execution, depth progression, reward generation.
*   **View Separation:** Maintain clear boundaries and responsibilities between these three core views/scenes.

## State Management & Communication

*   **State Separation Principle:** CRITICAL - Keep high-frequency game state (e.g., entity positions, physics) strictly within Phaser scenes. Only sync lower-frequency summary data or necessary UI state to React/Zustand periodically (e.g., every 10-15 frames) to avoid performance bottlenecks caused by React re-renders. (Ref: PERFORMANCE_PLAN.MD, STATE_ARCHITECTURE.MD)
*   **Communication:** Utilize a central **Event Bus** for decoupled communication between React components and Phaser scenes. Use the **Adapter Pattern** to provide standardized interfaces for React to interact with specific game features within Phaser (e.g., `useCombatAdapter`, `useGatheringAdapter`). (Ref: STATE_ARCHITECTURE.MD)
*   **Zustand Stores:** Prefer smaller, **domain-specific stores** (e.g., `ResourceStore`, `CombatStore`, `WorkshopStore`) over monolithic ones. (Ref: STATE_ARCHITECTURE.MD)

## Performance Patterns

*   **Tiered Update Frequency:** Implement varying update rates for different systems within Phaser scenes (e.g., Physics @ 60fps, AI @ ~20fps, UI Sync @ ~6fps) to optimize performance. (Ref: PERFORMANCE_PLAN.MD)
*   **Optimization Milestones:** Follow the defined milestones in `PERFORMANCE_PLAN.MD` for implementing optimizations like Object Pooling and Spatial Partitioning based on measured entity counts and FPS thresholds. Avoid premature optimization.

## Key Game Mechanics & Systems

*   **Progression Systems:**
    *   **Workshop:** Provides *instant*, *permanent* upgrades purchased primarily with *Coins*. Focuses on incremental stat boosts (gathering speed, combat stats, crafting speed, etc.).
    *   **Labs:** Handles *time-gated*, *resource-intensive* research for *major unlocks* (new mechanics, tiers, advanced recipes, core rule changes).
*   **Economy:**
    *   **Dual Currency:** Differentiate between temporary `Cash ($)` (earned/spent within a single Combat run for temporary boosts) and persistent `Coins` (earned via milestones/bosses, spent in Management View for permanent upgrades/research).
*   **Territory:** Use a **hex-based grid** for map representation, node placement, and tracking control/enhancement levels.
*   **Gathering:** Emphasize **visual gathering** where entities physically move on the Territory map. Gathering is initiated globally (e.g., "Gather Stone" button), not by clicking individual nodes.
*   **Combat:** Progression measured by **Depth**. `Enhance Hex` runs should utilize a **Clearing Speed** mechanic to bypass already-mastered early depths. Ammo is a finite, crafted resource.

## Development Practices

*   **Progressive Disclosure (UI):** Introduce UI elements and complexity gradually as mechanics are unlocked. Avoid overwhelming the player initially.
*   **Incremental Refactoring & Boy Scout Rule:**
    *   Prefer combining small architectural refactorings (implementing state patterns, services) with feature development rather than large-scale rewrites. (Ref: STATE_ARCHITECTURE.MD)
    *   When modifying a file, apply the Boy Scout rule: clean up minor issues like unnecessary comments.
    *   If significant structural/architectural improvements are identified that are outside the scope of the current task, flag them for potential addition to a dedicated refactoring plan (like `REFACTORING_PLAN.MD`) rather than performing them immediately.
*   **Code Comments (Strict Guidelines):**
    *   **Purpose:** Comments MUST explain the *why* behind complex, non-obvious logic or design decisions that cannot be easily inferred from the code itself. They should *never* explain the *what* or *how* if the code is clear.
    *   **Prohibited Comments (AI & Human):** The following types of comments are strictly forbidden and should not be generated or added:
        *   **Change Descriptions:** Comments describing the change being made (e.g., `// Refactored X`, `// Added Y`, `// Moved function`). This information belongs exclusively in commit messages.
        *   **Redundant/Obvious Logic:** Comments that merely restate the function/variable name or describe self-evident code logic (e.g., `// Loop through items`, `// Increment counter`).
        *   **Markers/Placeholders:** `TODO`, `FIXME`, `XXX`, `NOTE`, placeholder comments, or similar temporary markers. Use issue tracking systems for managing tasks and known issues.
        *   **Temporary State/Workarounds:** Comments explaining temporary fixes, workarounds, or incomplete states (e.g., `// Temporary fix until API is ready`). Address the underlying issue or document it externally.
    *   **Sparsity:** Add comments *very sparingly*. Clean, self-documenting code is preferred over excessive commenting. If code requires extensive comments to be understood, consider refactoring it for clarity first.

## Development Workflow & Context Management

*   **Context Updates (Repomix):** To manage API usage efficiently (due to potential request limits), prefer providing full project context periodically via a `repomix-output.xml` file generated by the user, rather than relying on numerous individual file reads or searches, especially when starting new sessions or tackling large tasks.
*   **Bulk File Operations:** For tasks involving numerous repetitive file operations (e.g., moving/renaming many files), consider batching them into a single, platform-appropriate command (e.g., PowerShell for Windows) or a temporary script, where feasible and efficient, instead of using multiple individual commands. Use judgment based on the number of files and complexity.
*   **Commit Messages:** Provide commit messages with a concise one-line summary followed by optional bullet points explaining the 'why' or intent behind the changes.
*   **Incremental Execution:** When following multi-step plans (like refactoring), complete only one numbered step at a time. Wait for user confirmation/feedback before proceeding to the next step to allow for testing and incremental commits.
